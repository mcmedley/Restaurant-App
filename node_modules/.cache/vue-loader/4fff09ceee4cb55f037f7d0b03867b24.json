{"remainingRequest":"C:\\Users\\Matt Medley\\Desktop\\eat24\\g01\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Matt Medley\\Desktop\\eat24\\g01\\src\\views\\Map.vue?vue&type=style&index=1&lang=css&","dependencies":[{"path":"C:\\Users\\Matt Medley\\Desktop\\eat24\\g01\\src\\views\\Map.vue","mtime":1588347906082},{"path":"C:\\Users\\Matt Medley\\Desktop\\eat24\\g01\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Matt Medley\\Desktop\\eat24\\g01\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\Matt Medley\\Desktop\\eat24\\g01\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\Matt Medley\\Desktop\\eat24\\g01\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1574476662000},{"path":"C:\\Users\\Matt Medley\\Desktop\\eat24\\g01\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Matt Medley\\Desktop\\eat24\\g01\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCiNtYXAgew0KICBoZWlnaHQ6IDQwMHB4Ow0KICB3aWR0aDogNTUlOw0KICBtYXJnaW46IDA7DQogIHBhZGRpbmc6IDA7DQogIGZsb2F0OiBsZWZ0Ow0KfQ0K"},{"version":3,"sources":["Map.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgSA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Map.vue","sourceRoot":"src/views","sourcesContent":["<template>\r\n  <v-container>\r\n    <h1 class=\"titleR\">Restaurants</h1>\r\n    <div id=\"map\" style=\"width: 100%; height: 400px;\"></div>\r\n    <div id=\"pano\" style=\"width: 45%; height: 400px; display: none;\"></div>\r\n  </v-container>\r\n</template>\r\n\r\n<script>\r\nimport $Scriptjs from \"scriptjs\";\r\nimport { eventBus } from \"@/event-bus.js\";\r\n\r\nexport default {\r\n  name: \"Experiment\",\r\n\r\n  mounted: function() {\r\n    $Scriptjs(\r\n      \"https://maps.googleapis.com/maps/api/js?key=AIzaSyAw1hclYoTxMTLkhN6YzdJoC42s-OAMo8Q&callback=initMap\",\r\n      () => {\r\n        this.initMap();\r\n      }\r\n    );\r\n  },\r\n\r\n  methods: {\r\n    initMap() {\r\n      var userPos = {\r\n        lat: 0,\r\n        lng: 0,\r\n      };\r\n      var rendererOptions = {\r\n        map: map,\r\n        suppressMarkers: true,\r\n      };\r\n      var geocoder = new google.maps.Geocoder();\r\n      var directionsService = new google.maps.DirectionsService();\r\n      var directionsRenderer = new google.maps.DirectionsRenderer(\r\n        rendererOptions\r\n      );\r\n      var sv = new google.maps.StreetViewService();\r\n      var panorama = new google.maps.StreetViewPanorama(\r\n        document.getElementById(\"pano\")\r\n      );\r\n      let Url = \"http://maps.google.com/mapfiles/ms/icons/blue-dot.png\";\r\n      var options = {\r\n        center: { lat: 42.034534, lng: -93.620369 },\r\n        zoom: 13,\r\n        streetViewControl: true,\r\n        styles: [\r\n          { elementType: \"geometry\", stylers: [{ color: \"#242f3e\" }] },\r\n          {\r\n            elementType: \"labels.text.stroke\",\r\n            stylers: [{ color: \"#242f3e\" }],\r\n          },\r\n          { elementType: \"labels.text.fill\", stylers: [{ color: \"#746855\" }] },\r\n          {\r\n            featureType: \"administrative.locality\",\r\n            elementType: \"labels.text.fill\",\r\n            stylers: [{ color: \"#d59563\" }],\r\n          },\r\n          {\r\n            featureType: \"poi\",\r\n            elementType: \"labels.text.fill\",\r\n            stylers: [{ color: \"#d59563\" }],\r\n          },\r\n          {\r\n            featureType: \"poi.park\",\r\n            elementType: \"geometry\",\r\n            stylers: [{ color: \"#263c3f\" }],\r\n          },\r\n          {\r\n            featureType: \"poi.park\",\r\n            elementType: \"labels.text.fill\",\r\n            stylers: [{ color: \"#6b9a76\" }],\r\n          },\r\n          {\r\n            featureType: \"road\",\r\n            elementType: \"geometry\",\r\n            stylers: [{ color: \"#38414e\" }],\r\n          },\r\n          {\r\n            featureType: \"road\",\r\n            elementType: \"geometry.stroke\",\r\n            stylers: [{ color: \"#212a37\" }],\r\n          },\r\n          {\r\n            featureType: \"road\",\r\n            elementType: \"labels.text.fill\",\r\n            stylers: [{ color: \"#9ca5b3\" }],\r\n          },\r\n          {\r\n            featureType: \"road.highway\",\r\n            elementType: \"geometry\",\r\n            stylers: [{ color: \"#746855\" }],\r\n          },\r\n          {\r\n            featureType: \"road.highway\",\r\n            elementType: \"geometry.stroke\",\r\n            stylers: [{ color: \"#1f2835\" }],\r\n          },\r\n          {\r\n            featureType: \"road.highway\",\r\n            elementType: \"labels.text.fill\",\r\n            stylers: [{ color: \"#f3d19c\" }],\r\n          },\r\n          {\r\n            featureType: \"transit\",\r\n            elementType: \"geometry\",\r\n            stylers: [{ color: \"#2f3948\" }],\r\n          },\r\n          {\r\n            featureType: \"transit.station\",\r\n            elementType: \"labels.text.fill\",\r\n            stylers: [{ color: \"#d59563\" }],\r\n          },\r\n          {\r\n            featureType: \"water\",\r\n            elementType: \"geometry\",\r\n            stylers: [{ color: \"#17263c\" }],\r\n          },\r\n          {\r\n            featureType: \"water\",\r\n            elementType: \"labels.text.fill\",\r\n            stylers: [{ color: \"#515c6d\" }],\r\n          },\r\n          {\r\n            featureType: \"water\",\r\n            elementType: \"labels.text.stroke\",\r\n            stylers: [{ color: \"#17263c\" }],\r\n          },\r\n        ],\r\n      };\r\n      sv.getPanorama({ location: userPos, radius: 50 }, processSVData);\r\n      var infoWindow;\r\n      var map = new google.maps.Map(document.getElementById(\"map\"), options);\r\n      directionsRenderer.setMap(map);\r\n\r\n      function processSVData(data, status) {\r\n        if (status === \"OK\") {\r\n          panorama.setPano(data.location.pano);\r\n          panorama.setPov({\r\n            heading: 270,\r\n            pitch: 0,\r\n          });\r\n          panorama.setVisible(true);\r\n        } else {\r\n          console.error(\"Street View data not found for this location.\");\r\n        }\r\n      }\r\n\r\n      // addMarker({\r\n      //   cords: { lat: 42.022, lng: -93.65161 },\r\n      //   info:\r\n      //     \"<h2> Domino's Pizza<br>Address: 302 Lincoln Way #102, Ames, IA 50010 </h2>\",\r\n      // });\r\n      // addMarker({\r\n      //   cords: { lat: 42.02329, lng: -93.668569 },\r\n      //   info: \"<h2> Mc Donald's <br>3621 Lincoln Way, Ames, IA 50010</h2>\",\r\n      // });\r\n      // addMarker({\r\n      //   cords: { lat: 42.022571, lng: -93.648784 },\r\n      //   info:\r\n      //     \"<h2>   Jeff's Pizza <h4>Laid-back, family-owned spot serving uniquely topped pizzas & other Italian cuisine.</h4></h2>\",\r\n      // });\r\n\r\n      const cities = [\r\n        { lat: 42.022, lng: -93.65161 },\r\n        { lat: 42.02329, lng: -93.668569 },\r\n        { lat: 42.022571, lng: -93.648784 },\r\n        { lat: 41.904869, lng: -87.643181 },\r\n        { lat: 42.3236, lng: -83.17192 },\r\n        // { lat: 40.69, lng: -73.97 },\r\n      ];\r\n      for (let i = 0; i < cities.length; i++) {\r\n        geocodeLatLng(cities[i]);\r\n      }\r\n\r\n      function geocodeLatLng(position) {\r\n        geocoder.geocode({ location: position }, function(results, status) {\r\n          if (status === \"OK\") {\r\n            if (results[0]) {\r\n              addMarker({\r\n                cords: position,\r\n                info: results[0].formatted_address,\r\n              });\r\n            } else {\r\n              console.log(\"No results found\");\r\n            }\r\n          } else {\r\n            console.log(\"Geocoder failed due to: \" + status);\r\n          }\r\n        });\r\n      }\r\n\r\n      infoWindow = new google.maps.InfoWindow();\r\n      if (navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition(\r\n          function(position) {\r\n            userPos.lat = position.coords.latitude;\r\n            userPos.lng = position.coords.longitude;\r\n            addMarker({\r\n              cords: {\r\n                lat: position.coords.latitude,\r\n                lng: position.coords.longitude,\r\n              },\r\n              info: \"<h2> You are here! </h2>\",\r\n              url: Url,\r\n            });\r\n            infoWindow.setPosition(userPos);\r\n            infoWindow.setContent(\"You are here!\");\r\n            infoWindow.open(map);\r\n            map.setCenter(pos);\r\n          },\r\n          function() {\r\n            handleLocationError(true);\r\n          }\r\n        );\r\n      } else {\r\n        handleLocationError(false);\r\n      }\r\n\r\n      function handleLocationError(browserHasGeolocation) {\r\n        browserHasGeolocation\r\n          ? alert(\"Error: The Geolocation service failed.\")\r\n          : alert(\"Error: Your browser doesn't support geolocation.\");\r\n      }\r\n\r\n      function calcRoute(position) {\r\n        var start = userPos;\r\n        var end = position;\r\n        var request = {\r\n          origin: start,\r\n          destination: end,\r\n          travelMode: \"DRIVING\",\r\n          // drivingOptions: {\r\n          //   departureTime: new Date(now),\r\n          //   trafficModel: \"pessimistic\",\r\n          // },\r\n        };\r\n        directionsService.route(request, function(result, status) {\r\n          if (status == \"OK\") {\r\n            directionsRenderer.setDirections(result);\r\n            directionsRenderer.setDistance(result);\r\n          }\r\n        });\r\n      }\r\n\r\n      function addMarker(props) {\r\n        var marker = new google.maps.Marker({\r\n          position: props.cords,\r\n          animation: google.maps.Animation.DROP,\r\n          map: map,\r\n          icon: {\r\n            url: props.url,\r\n          },\r\n        });\r\n        var info = new google.maps.InfoWindow({\r\n          content: props.info,\r\n        });\r\n        marker.addListener(\"mouseover\", function() {\r\n          info.open(map, marker);\r\n        });\r\n        marker.addListener(\"mouseout\", function() {\r\n          info.close(map, marker);\r\n        });\r\n\r\n        marker.addListener(\"click\", function() {\r\n          let pos = new google.maps.LatLng(props.cords.lat, props.cords.lng);\r\n          sv.getPanorama({ location: pos, radius: 50 }, processSVData);\r\n          calcRoute(pos);\r\n          document.getElementById(\"map\").style.width = \"55%\";\r\n          document.getElementById(\"pano\").style.display = \"block\";\r\n        });\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scope lang=\"scss\">\r\n.titleR {\r\n  font-weight: 850;\r\n  color: black;\r\n  text-align: center;\r\n}\r\n</style>\r\n\r\n<style>\r\n#map {\r\n  height: 400px;\r\n  width: 55%;\r\n  margin: 0;\r\n  padding: 0;\r\n  float: left;\r\n}\r\n</style>\r\n"]}]}