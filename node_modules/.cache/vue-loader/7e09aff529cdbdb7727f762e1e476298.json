{"remainingRequest":"C:\\Users\\Matt Medley\\Desktop\\eat24\\g01\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Matt Medley\\Desktop\\eat24\\g01\\src\\components\\Map.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"C:\\Users\\Matt Medley\\Desktop\\eat24\\g01\\src\\components\\Map.vue","mtime":1588347906068},{"path":"C:\\Users\\Matt Medley\\Desktop\\eat24\\g01\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Matt Medley\\Desktop\\eat24\\g01\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\Matt Medley\\Desktop\\eat24\\g01\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\Matt Medley\\Desktop\\eat24\\g01\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1574476662000},{"path":"C:\\Users\\Matt Medley\\Desktop\\eat24\\g01\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Matt Medley\\Desktop\\eat24\\g01\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQojbWFwIHsNCiAgd2lkdGg6IDQwdnc7DQogIGhlaWdodDogMzB2dzsNCn0NCg=="},{"version":3,"sources":["Map.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmKA;AACA;AACA;AACA","file":"Map.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <v-flex xs4>\r\n    <v-card>\r\n      <div id=\"map\"></div>\r\n    </v-card>\r\n  </v-flex>\r\n</template>\r\n\r\n<script>\r\nimport $Scriptjs from \"scriptjs\";\r\nimport { eventBus } from \"@/event-bus.js\";\r\n\r\nexport default {\r\n  name: \"Map\",\r\n\r\n  data() {\r\n    return {\r\n      map: null,\r\n      marker: null,\r\n      lastLat: null,\r\n      lastLng: null,\r\n\r\n      getNextPage: null,\r\n      DEFAULT_LAT: 42.034534,\r\n      DEFAULT_LNG: -93.620369,\r\n\r\n      geocoder: null,\r\n      placesService: null,\r\n    };\r\n  },\r\n\r\n  mounted: function() {\r\n    $Scriptjs(\r\n      \"https://maps.googleapis.com/maps/api/js?key=AIzaSyAw1hclYoTxMTLkhN6YzdJoC42s-OAMo8Q&libraries=geometry,places\",\r\n      () => {\r\n        this.initMap();\r\n      }\r\n    );\r\n\r\n    eventBus.$on(\"newTextAddress\", (payload) => {\r\n      this.updateFromTextAddress(payload);\r\n    });\r\n\r\n    eventBus.$on(\"sendCityData\", (payload) => {\r\n      this.renderCityMap(payload.coordinates);\r\n      this.setDataLayer(payload.multiPoly, payload.numGeometries);\r\n    });\r\n\r\n    eventBus.$on(\"launchKeywordSearch\", (payload) => {\r\n      this.doKeywordSearch(payload);\r\n    });\r\n  },\r\n\r\n  methods: {\r\n    wait(timeout) {\r\n      return new Promise((resolve) => {\r\n        setTimeout(() => {\r\n          resolve();\r\n        }, timeout);\r\n      });\r\n    },\r\n\r\n    updateFromTextAddress(payload) {\r\n      this.map.setCenter(payload.geometry.location);\r\n      this.updateMarker(payload.geometry.location);\r\n      this.lastLat = payload.geometry.location.lat();\r\n      this.lastLng = payload.geometry.location.lng();\r\n    },\r\n\r\n    renderCityMap(myCityData) {\r\n      myCityData.setMap(this.map);\r\n\r\n      myCityData.addListener(\"click\", (event) => {\r\n        google.maps.event.trigger(this.map, \"click\", event);\r\n      });\r\n    },\r\n\r\n    initMap() {\r\n      this.geocoder = new google.maps.Geocoder();\r\n\r\n      this.map = new google.maps.Map(document.getElementById(\"map\"), {\r\n        center: {\r\n          lat: this.DEFAULT_LAT,\r\n          lng: this.DEFAULT_LNG,\r\n        },\r\n        zoom: 4,\r\n        gestureHandling: \"greedy\",\r\n      });\r\n\r\n      this.placesService = new google.maps.places.PlacesService(this.map);\r\n\r\n      google.maps.event.addListener(this.map, \"click\", (event) => {\r\n        this.lastLat = event.latLng.lat();\r\n        this.lastLng = event.latLng.lng();\r\n\r\n        this.updateMarker(event.latLng);\r\n\r\n        this.geocoder.geocode({ location: event.latLng }, (results, status) => {\r\n          if (results) {\r\n            eventBus.$emit(\"mapAddress\", results);\r\n          }\r\n        });\r\n      });\r\n      eventBus.$emit(\"googleInit\", {});\r\n    },\r\n\r\n    updateMarker(latLng) {\r\n      if (!this.marker) {\r\n        this.marker = new google.maps.Marker({\r\n          map: this.map,\r\n        });\r\n      }\r\n\r\n      this.marker.setPosition(latLng);\r\n    },\r\n\r\n    doSearch(params) {\r\n      let _this = this;\r\n      this.placesService.nearbySearch(params, async function(\r\n        results,\r\n        PlacesServiceStatus,\r\n        PlaceSearchPagination\r\n      ) {\r\n        if (PlacesServiceStatus !== \"OK\") return;\r\n\r\n        _this.searchResultMarkers(results);\r\n\r\n        if (PlaceSearchPagination.hasNextPage) {\r\n          await _this.wait(100);\r\n          _this.getNextPage =\r\n            PlaceSearchPagination.hasNextPage &&\r\n            function() {\r\n              PlaceSearchPagination.nextPage();\r\n            };\r\n        } else {\r\n          _this.getNextPage = null;\r\n        }\r\n        if (_this.getNextPage) {\r\n          _this.getNextPage();\r\n        }\r\n      });\r\n    },\r\n\r\n    googlePlacesSearch(keyword, radius = 1000) {\r\n      if (!keyword.trim()) return;\r\n\r\n      let params = {\r\n        location: new google.maps.LatLng(this.lastLat, this.lastLng),\r\n        radius: radius,\r\n        keyword: keyword,\r\n      };\r\n\r\n      this.doSearch(params);\r\n    },\r\n\r\n    doKeywordSearch(keyword) {\r\n      this.googlePlacesSearch(keyword, 500);\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n#map {\r\n  width: 40vw;\r\n  height: 30vw;\r\n}\r\n</style>\r\n"]}]}